use std::str::FromStr;
use crate::renderer::*;
use crate::renderer::object::*;
use crate::renderer::scene::*;
use crate::operation::*;
use crate::audio::AudioParam;
use lalrpop_util::ParseError;
use crate::script::{
    ScriptError,
    create_object
};

grammar(renderer: &Renderer);

extern {
    type Error = ScriptError;
}

pub Display: Display = {
    "display" "=" <s:Scene> => Display::new(s)
};

Scene: Box<dyn Scene> = {
    RenderListScene => <>
};

RenderListScene: Box<dyn Scene> = {
    "scene" "{" <b:BG> <o:Objects> "}" =>? RenderList::new(o, b, renderer)
        .map_err(|e| ParseError::User {
            error: e.into()
        })
};

BG: Mapping = {
    "bg" "=" "{" <m:Mapping> "}" => m
};

Objects: Vec<Box<dyn ObjectRenderable>> = {
    "objects" "=" "[" <o:ObjectList> "]" => o
};

ObjectList: Vec<Box<dyn ObjectRenderable>> = {
    <mut l:ObjectList> "," <o:Object> => { l.push(o); l },
    Object => vec![<>]
};

Object: Box<dyn ObjectRenderable> = {
    <r:ObjectType> "{" <m:Mapping> "}" =>? create_object(r, m, renderer)
        .map_err(|e| ParseError::User {
            error: e.into()
        })
};

Mapping: Mapping = {
    <m:Mapping> "," <p:ParamBinding> => m.add(p),
    ParamBinding => Mapping::new(<>)
};

ParamBinding: (RenderParam, Operation) = {
    <p:RenderParam> "=" <o:Operation> => (p, o)
};

Operation: Operation = {
    <o:AddSubExpr> => o
};

AddSubExpr: Operation = {
    <l:AddSubExpr> "+" <r:MulDivExpr> => Operation::Add(Box::new(l), Box::new(r)),
    <l:AddSubExpr> "-" <r:MulDivExpr> => Operation::Sub(Box::new(l), Box::new(r)),
    MulDivExpr,
};

MulDivExpr: Operation = {
    <l:MulDivExpr> "*" <r:Term> => Operation::Mul(Box::new(l), Box::new(r)),
    <l:MulDivExpr> "/" <r:Term> => Operation::Div(Box::new(l), Box::new(r)),
    Term,
};

Term: Operation = {
    <n:Float>       => Operation::Const(n),
    <p:AudioParam>  => Operation::Param(p),
    "(" <e:Operation> ")" => e
};

ObjectType: ObjectType = {
    r"[a-z_]+" =>? ObjectType::from_str(<>)
        .map_err(|_| ParseError::User {
            error: ScriptError::UnrecognizedObject(<>.to_string())
        })
};

AudioParam: AudioParam = {
    r"[a-z_]+" =>? AudioParam::from_str(<>)
        .map_err(|_| ParseError::User {
            error: ScriptError::UnrecognizedAudioParam(<>.to_string())
        })
};

RenderParam: RenderParam = {
    r"[a-z_]+" =>? RenderParam::from_str(<>)
        .map_err(|_| ParseError::User {
            error: ScriptError::UnrecognizedRenderParam(<>.to_string())
        })
};

Float: f32 = {
    r"\-?[0-9]+"         => f32::from_str(<>).unwrap(),
    r"\-?[0-9]*\.[0-9]+" => f32::from_str(<>).unwrap(),
};